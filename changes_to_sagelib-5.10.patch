# HG changeset patch
# User Marc Masdeu <masdeu@math.columbia.edu>
# Date 1374695639 14400
#      Wed Jul 24 15:53:59 2013 -0400
# Node ID ec5ad34c87a172278406272ab84a6ee02ed7b1fc
# Parent  0f8fd922eaed351e39f913f1317d319dcceb4c01
Needed changes to sagelib

diff --git a/module_list.py b/module_list.py
--- a/module_list.py
+++ b/module_list.py
@@ -1234,6 +1234,13 @@
               sources = ['sage/modular/modsym/p1list.pyx'],
               libraries = ['gmp']),
 
+    Extension('sage.modular.pollack_stevens.dist',
+              sources = ['sage/modular/pollack_stevens/dist.pyx'],
+              libraries = ['flint','gmp','zn_poly'],
+              extra_compile_args=['-std=c99', '-D_XPG6'],
+              include_dirs = [SAGE_INC + 'flint/'],
+              depends = flint_depends),
+
     ################################
     ## 
     ## sage.modules
diff --git a/sage/libs/flint/ulong_extras.pxd b/sage/libs/flint/ulong_extras.pxd
--- a/sage/libs/flint/ulong_extras.pxd
+++ b/sage/libs/flint/ulong_extras.pxd
@@ -1,7 +1,7 @@
 include "sage/ext/stdsage.pxi"
 
 from sage.libs.flint.flint cimport *
-
+from sage.libs.flint.nmod_poly cimport mp_limb_t
 
 cdef extern from "flint/ulong_extras.h":
 
@@ -18,3 +18,4 @@
 
     cdef void n_factor(n_factor_t * factors, unsigned long n, int proved)
     cdef void n_factor_init(n_factor_t * factors)
+    cdef mp_limb_t n_preinvert_limb(mp_limb_t n)
diff --git a/sage/matrix/matrix_integer_2x2.pyx b/sage/matrix/matrix_integer_2x2.pyx
--- a/sage/matrix/matrix_integer_2x2.pyx
+++ b/sage/matrix/matrix_integer_2x2.pyx
@@ -392,11 +392,15 @@
             sage: m == n
             False
         """
-        return mpz_cmp(left.a, (<Matrix_integer_2x2>right).a) or \
-               mpz_cmp(left.b, (<Matrix_integer_2x2>right).b) or \
-               mpz_cmp(left.c, (<Matrix_integer_2x2>right).c) or \
-               mpz_cmp(left.d, (<Matrix_integer_2x2>right).d)
-       
+        cdef int c = mpz_cmp(left.a, (<Matrix_integer_2x2>right).a) or \
+                     mpz_cmp(left.b, (<Matrix_integer_2x2>right).b) or \
+                     mpz_cmp(left.c, (<Matrix_integer_2x2>right).c) or \
+                     mpz_cmp(left.d, (<Matrix_integer_2x2>right).d)
+        if c < 0: return -1
+        if c > 0: return 1
+        return 0
+
+
     def __neg__(self):
         """
         Return the additive inverse of self.
diff --git a/sage/modular/all.py b/sage/modular/all.py
--- a/sage/modular/all.py
+++ b/sage/modular/all.py
@@ -30,6 +30,10 @@
 
 from overconvergent.all import *
 
+from pollack_stevens.all import *
+
+from btquotients.all import *
+
 from local_comp.all import *
 
 from cusps_nf import NFCusp, NFCusps, NFCusps_clear_cache, Gamma0_NFCusps
diff --git a/sage/modular/modform/element.py b/sage/modular/modform/element.py
--- a/sage/modular/modform/element.py
+++ b/sage/modular/modform/element.py
@@ -19,6 +19,7 @@
 from sage.modules.free_module_element import vector
 from sage.misc.misc import verbose
 from sage.modular.dirichlet import DirichletGroup
+from sage.modular.pollack_stevens.space import ps_modsym_from_simple_modsym_space
 
 def is_ModularFormElement(x):
     """
@@ -834,6 +835,19 @@
         """
         return self.__modsym_space.modular_symbols_of_sign(sign)
 
+    def PS_modular_symbol(self, sign=1):
+        r"""
+        Return the Pollack-Stevens modular symbol attached to this newform.
+
+        EXAMPLE::
+
+            sage: f = Newform('37a')
+            sage: f.PS_modular_symbol()
+            Modular symbol with values in Sym^0 Q^2
+        """
+        M = self.modular_symbols(sign)
+        return ps_modsym_from_simple_modsym_space(M)
+
     def _defining_modular_symbols(self):
         """
         Return the modular symbols space corresponding to self.
diff --git a/sage/rings/padics/padic_ZZ_pX_CR_element.pyx b/sage/rings/padics/padic_ZZ_pX_CR_element.pyx
--- a/sage/rings/padics/padic_ZZ_pX_CR_element.pyx
+++ b/sage/rings/padics/padic_ZZ_pX_CR_element.pyx
@@ -2264,6 +2264,39 @@
         # for now, a simple implementation
         return self * (~right)
 
+    def add_bigoh(self, _n):
+        if _n is infinity:
+            return self
+        _n = Integer(_n)
+        cdef long n, aprec
+        if mpz_fits_slong_p((<Integer>_n).value):
+            n = mpz_get_si((<Integer>_n).value)
+        elif mpz_sgn((<Integer>_n).value) > 0:
+            return self
+        else:
+            raise ValueError("negative valuation too large")
+        if self.relprec < 0:
+            aprec = self.ordp - self.relprec
+        else:
+            aprec = self.ordp + self.relprec
+        if n >= aprec:
+            return self
+        if n <= self.ordp:
+            ans = self._new_c(0)
+            ans.ordp = n
+        else:
+            ans = self._new_c(n - self.ordp)
+            ans.ordp = self.ordp
+        if n < 0 and not ans.prime_pow.in_field:
+            ans._parent = self._parent.fraction_field()
+            ans.prime_pow = ans._parent.prime_pow
+        if ans.relprec == 0:
+            return ans
+        ZZ_pX_conv_modulus(ans.unit, self.unit, self.prime_pow.get_context_capdiv(ans.relprec).x)
+        if self.relprec < 0:
+            ans.relprec = -ans.relprec
+        return ans
+
     def __copy__(self):
         """
         Returns a copy of ``self``.
diff --git a/sage/rings/padics/padic_capped_absolute_element.pyx b/sage/rings/padics/padic_capped_absolute_element.pyx
--- a/sage/rings/padics/padic_capped_absolute_element.pyx
+++ b/sage/rings/padics/padic_capped_absolute_element.pyx
@@ -1402,7 +1402,7 @@
         else:
             return self
 
-    def valuation(self):
+    def valuation(self, p = None):
         """
         Returns the valuation of ``self``, ie the largest power of `p`
         dividing ``self``.
@@ -1432,7 +1432,10 @@
         """
         # We override this, rather than using the valuation in
         # padic_generic_element, for speed reasons.
-        
+
+        if p is not None and p != self.prime_pow.prime:
+            raise ValueError("p must be the same as the prime")
+
         cdef Integer ans
         ans = PY_NEW(Integer)
         mpz_set_ui(ans.value, self.valuation_c())
diff --git a/sage/rings/padics/pow_computer.pxd b/sage/rings/padics/pow_computer.pxd
--- a/sage/rings/padics/pow_computer.pxd
+++ b/sage/rings/padics/pow_computer.pxd
@@ -20,4 +20,9 @@
 cdef class PowComputer_base(PowComputer_class):
     cdef mpz_t* small_powers
     cdef mpz_t top_power
-    cdef object __weakref__
\ No newline at end of file
+    cdef object __weakref__
+
+cdef class PowComputer_long(PowComputer_class):
+    cdef long* small_powers
+    cdef object __weakref__
+
diff --git a/sage/rings/padics/pow_computer.pyx b/sage/rings/padics/pow_computer.pyx
--- a/sage/rings/padics/pow_computer.pyx
+++ b/sage/rings/padics/pow_computer.pyx
@@ -503,7 +503,43 @@
             return &(self.top_power)
         mpz_pow_ui(self.temp_m, self.prime.value, n)
         return &(self.temp_m)
-        
+
+cdef class PowComputer_long(PowComputer_class):
+    def __cinit__(self, Integer prime, long cache_limit, long prec_cap, long ram_prec_cap, bint in_field, poly=None, shift_seed=None):
+        self._initialized = 0
+        sig_on()
+        self.small_powers = <long*>sage_malloc(sizeof(mpz_t) * (cache_limit + 1))
+        sig_off()
+        if self.small_powers == NULL:
+            raise MemoryError("out of memory allocating power storing")
+        mpz_init(self.temp_m)
+
+        cdef Py_ssize_t i
+        self.small_powers[0] = 1
+        if cache_limit > 0:
+            self.small_powers[1] = mpz_get_si(prime.value)
+        for i from 2 <= i <= cache_limit:
+            self.small_powers[i] = self.small_powers[i-1] * self.small_powers[1]
+        (<PowComputer_class>self)._initialized = 1
+
+    def __dealloc__(self):
+        cdef Py_ssize_t i
+        if (<PowComputer_class>self)._initialized:
+            sage_free(self.small_powers)
+            mpz_clear(self.temp_m)
+
+    cdef mpz_t* pow_mpz_t_top(self):
+        mpz_set_si(self.temp_m, self.small_powers[self.prec_cap])
+        return &self.temp_m
+
+    cdef mpz_t* pow_mpz_t_tmp(self, long n):
+        if n <= self.cache_limit:
+            mpz_set_si(self.temp_m, self.small_powers[n])
+        else:
+            mpz_pow_ui(self.temp_m, self.prime.value, n)
+        return &(self.temp_m)
+
+
 pow_comp_cache = {}
 cdef PowComputer_base PowComputer_c(Integer m, Integer cache_limit, Integer prec_cap, in_field):
     """
diff --git a/sage/schemes/elliptic_curves/ell_rational_field.py b/sage/schemes/elliptic_curves/ell_rational_field.py
--- a/sage/schemes/elliptic_curves/ell_rational_field.py
+++ b/sage/schemes/elliptic_curves/ell_rational_field.py
@@ -1243,6 +1243,19 @@
 
     padic_lseries = padics.padic_lseries
 
+    def PS_modular_symbol(self):
+        r"""
+        Return the Pollack-Stevens modular symbol of E.
+
+        EXAMPLE::
+
+            sage: E = EllipticCurve('389a') 
+            sage: E.PS_modular_symbol()    
+            Modular symbol with values in Sym^0 Q^2
+        """
+        from sage.modular.pollack_stevens.space import ps_modsym_from_elliptic_curve
+        return ps_modsym_from_elliptic_curve(self)
+
     def newform(self):
         r"""
         Same as ``self.modular_form()``.
